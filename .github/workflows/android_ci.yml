name: Android CI Pipeline

on:
  push:
    branches: [ "main", "develop" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ "main", "develop" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      run_ui_tests:
        description: 'Run UI tests'
        required: false
        default: true
        type: boolean
      deploy_to_firebase:
        description: 'Deploy to Firebase'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  GRADLE_OPTS: >-
    -Dorg.gradle.daemon=false
    -Dorg.gradle.parallel=true
    -Dorg.gradle.configureondemand=true
    -Dorg.gradle.caching=true
    -Dorg.gradle.workers.max=4
    -Xmx6g
    -XX:+UseG1GC
    -XX:+HeapDumpOnOutOfMemoryError
  ANDROID_COMPILE_SDK: 34
  ANDROID_BUILD_TOOLS: "34.0.0"
  ANDROID_MIN_SDK: 24
  EMULATOR_API_LEVEL: 30
  JAVA_VERSION: 17
  GRADLE_VERSION: 8.1.1

jobs:
  validation:
    name: Validate Gradle Wrapper
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: validation
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        variant: [debug, release]
        include:
          - variant: debug
            upload_apk: true
          - variant: release
            upload_apk: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: ${{ env.ANDROID_COMPILE_SDK }}
          build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
          cmake: 3.22.1
          ndk: 25.2.9519653

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          gradle-home-cache-cleanup: true
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}

      - name: Create local.properties
        run: |
          echo "sdk.dir=$ANDROID_HOME" >> local.properties
          echo "ndk.dir=$ANDROID_NDK_HOME" >> local.properties

      - name: Run code quality checks
        run: |
          ./gradlew \
            lint${{ matrix.variant }} \
            detekt \
            ktlintCheck \
            --continue \
            --build-cache \
            --configuration-cache \
            --stacktrace

      - name: Run unit tests
        run: |
          ./gradlew \
            test${{ matrix.variant }}UnitTest \
            jacocoTest${{ matrix.variant }}UnitTestReport \
            --continue \
            --build-cache \
            --configuration-cache \
            --stacktrace

      - name: Build APK
        run: |
          ./gradlew \
            assemble${{ matrix.variant }} \
            --build-cache \
            --configuration-cache \
            --stacktrace

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests (${{ matrix.variant }})
          path: '**/TEST-*.xml'
          reporter: java-junit
          fail-on-error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.variant }}
          path: |
            app/build/reports/tests/
            app/build/test-results/
            app/build/reports/lint-results*
            app/build/reports/detekt/
            app/build/reports/jacoco/
          retention-days: 14

      - name: Upload APK
        if: matrix.upload_apk
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.variant }}-${{ github.run_number }}
          path: app/build/outputs/apk/${{ matrix.variant }}/*.apk
          retention-days: 30

      - name: Upload mapping files
        if: matrix.variant == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: mapping-${{ matrix.variant }}-${{ github.run_number }}
          path: app/build/outputs/mapping/${{ matrix.variant }}/
          retention-days: 90

      - name: Comment PR with APK info
        if: github.event_name == 'pull_request' && matrix.upload_apk
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('fs');
            const apkPath = 'app/build/outputs/apk/debug';
            const files = fs.readdirSync(apkPath);
            const apkFile = files.find(f => f.endsWith('.apk'));
            const stats = fs.statSync(`${apkPath}/${apkFile}`);
            const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
            
            const comment = `
            ## 📱 APK Build Summary
            
            **APK Generated:** \`${apkFile}\`
            **Size:** ${fileSizeInMB} MB
            **Variant:** ${{ matrix.variant }}
            **Commit:** ${context.sha.substring(0, 7)}
            
            Download the APK from the [Actions artifacts](${context.payload.pull_request.html_url}/checks).
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  ui-tests:
    name: UI Tests
    runs-on: macos-13 # Better performance than latest
    needs: build-and-test
    if: github.event_name != 'pull_request' || github.event.inputs.run_ui_tests == 'true'
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        api-level: [29, 33]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ runner.arch }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          cores: 2
          ram-size: 4096M
          heap-size: 1024M
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: echo "Generated AVD snapshot for caching."

      - name: Run instrumented tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          cores: 2
          ram-size: 4096M
          heap-size: 1024M
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            adb logcat > logcat.txt &
            ./gradlew connectedDebugAndroidTest \
              --continue \
              --build-cache \
              --configuration-cache \
              --stacktrace

      - name: Upload UI test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-results-api-${{ matrix.api-level }}
          path: |
            app/build/reports/androidTests/connected/
            app/build/outputs/androidTest-results/
            logcat.txt
          retention-days: 14

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Run dependency vulnerability scan
        run: |
          ./gradlew dependencyCheckAnalyze \
            --build-cache \
            --configuration-cache \
            --stacktrace

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: app/build/reports/dependency-check-report.html
          retention-days: 30

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-and-test, ui-tests]
    if: >
      github.ref == 'refs/heads/main' && 
      (github.event_name == 'push' || github.event.inputs.deploy_to_firebase == 'true')
    environment: production
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: apk-debug-${{ github.run_number }}
          path: apk-artifact

      - name: Get APK info
        id: apk-info
        run: |
          APK_FILE=$(find apk-artifact -name "*.apk" | head -1)
          APK_SIZE=$(stat -c%s "$APK_FILE" | numfmt --to=iec)
          echo "apk-path=$APK_FILE" >> $GITHUB_OUTPUT
          echo "apk-size=$APK_SIZE" >> $GITHUB_OUTPUT

      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFile: ${{ secrets.GCP_SA_KEY }}
          groups: internal-testers,qa-team
          file: ${{ steps.apk-info.outputs.apk-path }}
          releaseNotes: |
            🚀 **Build:** ${{ github.run_number }}
            📝 **Commit:** ${{ github.sha }}
            👤 **Author:** ${{ github.actor }}
            📦 **Size:** ${{ steps.apk-info.outputs.apk-size }}
            
            **Changes:**
            ${{ github.event.head_commit.message }}

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#android-releases'
          text: |
            Android app deployed to Firebase App Distribution
            Status: ${{ job.status }}
            Build: ${{ github.run_number }}
            Size: ${{ steps.apk-info.outputs.apk-size }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-and-test, ui-tests, deploy]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
              const ageInDays = (Date.now() - new Date(artifact.created_at).getTime()) / (1000 * 60 * 60 * 24);
              return ageInDays > 30 && artifact.name.startsWith('apk-');
            });
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted old artifact: ${artifact.name}`);
            }